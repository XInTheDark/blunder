package engine

const (
	// Constants which map a piece to how much weight it should have on the phase of the game.
	PawnPhase   int16 = 0
	KnightPhase int16 = 1
	BishopPhase int16 = 1
	RookPhase   int16 = 2
	QueenPhase  int16 = 4
	TotalPhase  int16 = PawnPhase*16 + KnightPhase*4 + BishopPhase*4 + RookPhase*4 + QueenPhase*2

	// Constants representing a draw or infinite (checkmate) value.
	Inf            int16 = 10000
	MiddleGameDraw int16 = 25
	EndGameDraw    int16 = 0
)

var PhaseValues [6]int16 = [6]int16{
	PawnPhase,
	KnightPhase,
	BishopPhase,
	RookPhase,
	QueenPhase,
}

// Endgame and middlegame piece square tables, with piece values builtin.
//
// https://www.chessprogramming.org/Piece-Square_Tables
//
var PSQT_MG [6][64]int16 = [6][64]int16{

	// Piece-square table for pawns
	{
		120, 102, 99, 105, 99, 100, 101, 97,
		248, 251, 214, 213, 222, 218, 237, 151,
		102, 113, 126, 136, 171, 144, 91, 82,
		78, 104, 99, 112, 115, 104, 108, 69,
		67, 88, 86, 102, 108, 97, 99, 66,
		71, 87, 87, 81, 91, 92, 123, 81,
		59, 89, 70, 65, 73, 115, 125, 71,
		117, 101, 103, 105, 101, 99, 100, 99,
	},

	// Piece-square table for knights
	{
		117, 242, 322, 296, 356, 203, 277, 196,
		231, 254, 386, 348, 353, 375, 311, 308,
		270, 368, 355, 381, 390, 420, 388, 345,
		307, 332, 338, 365, 350, 385, 336, 341,
		296, 316, 331, 327, 346, 337, 346, 311,
		288, 304, 327, 326, 342, 332, 338, 298,
		304, 263, 308, 313, 312, 341, 306, 303,
		240, 293, 269, 280, 295, 307, 297, 299,
	},

	// Piece-square table for bishops
	{
		312, 362, 258, 299, 291, 301, 336, 325,
		301, 352, 331, 327, 337, 389, 347, 292,
		313, 368, 369, 373, 374, 401, 378, 335,
		334, 350, 364, 394, 384, 377, 352, 333,
		342, 351, 350, 359, 373, 353, 353, 345,
		341, 347, 356, 353, 351, 366, 353, 345,
		336, 353, 356, 340, 345, 359, 370, 350,
		312, 345, 326, 321, 321, 325, 318, 323,
	},

	// Piece square table for rook
	{
		503, 528, 513, 539, 536, 489, 524, 508,
		520, 522, 542, 544, 574, 547, 508, 529,
		492, 513, 507, 524, 493, 541, 539, 494,
		475, 490, 518, 524, 516, 533, 492, 468,
		458, 472, 484, 496, 506, 491, 510, 476,
		457, 476, 466, 474, 502, 488, 489, 462,
		452, 477, 480, 487, 492, 503, 493, 430,
		478, 485, 499, 516, 513, 504, 463, 470,
	},

	// Piece square table for queens
	{
		885, 891, 933, 938, 954, 939, 945, 931,
		881, 867, 901, 931, 940, 974, 970, 950,
		889, 911, 928, 927, 939, 976, 960, 962,
		878, 878, 895, 901, 914, 924, 940, 907,
		902, 876, 904, 900, 914, 919, 921, 920,
		894, 918, 906, 911, 902, 910, 923, 922,
		887, 904, 926, 911, 919, 927, 919, 923,
		915, 897, 909, 924, 896, 888, 867, 860,
	},

	// Piece square table for kings
	{
		30, 93, 79, 63, -1, 37, 42, 36,
		61, 46, 57, 73, 63, 49, 28, -3,
		38, 49, 49, 39, 28, 63, 58, 1,
		-11, 19, 30, 27, 23, 34, 28, -5,
		-12, 44, -3, -18, -7, -5, 4, -24,
		41, 13, 10, -13, -3, -4, 0, 0,
		24, 25, 9, -51, -36, -3, 17, 24,
		-15, 41, 28, -50, 17, -23, 36, 24,
	},
}

var PSQT_EG [6][64]int16 = [6][64]int16{

	// Piece-square table for pawns
	{
		109, 95, 99, 102, 100, 102, 99, 100,
		256, 252, 217, 211, 225, 219, 238, 270,
		183, 191, 176, 154, 136, 146, 178, 176,
		122, 114, 102, 93, 82, 91, 105, 107,
		102, 99, 86, 79, 80, 78, 92, 89,
		90, 96, 82, 88, 88, 85, 84, 79,
		101, 98, 100, 100, 102, 88, 91, 81,
		114, 107, 103, 100, 99, 100, 99, 101,
	},

	// Piece-square table for knights
	{
		211, 244, 269, 260, 263, 262, 226, 183,
		267, 287, 257, 284, 266, 250, 264, 224,
		264, 268, 291, 298, 286, 278, 265, 252,
		273, 291, 307, 307, 306, 292, 292, 269,
		271, 284, 301, 315, 298, 306, 284, 262,
		270, 287, 287, 303, 290, 289, 266, 270,
		233, 268, 268, 278, 284, 253, 251, 244,
		235, 234, 264, 273, 257, 243, 241, 222,
	},

	// Piece-square table for bishops
	{
		276, 270, 290, 300, 298, 289, 290, 277,
		293, 299, 309, 287, 305, 284, 297, 279,
		307, 299, 304, 300, 293, 302, 306, 304,
		295, 311, 310, 307, 318, 306, 306, 305,
		288, 306, 316, 325, 304, 314, 291, 296,
		290, 299, 311, 314, 319, 306, 294, 285,
		287, 289, 293, 305, 309, 294, 291, 273,
		277, 292, 284, 295, 291, 292, 284, 284,
	},

	// Piece square table for rook
	{
		517, 509, 520, 514, 514, 514, 505, 508,
		507, 513, 516, 514, 488, 502, 509, 510,
		508, 510, 513, 503, 510, 494, 495, 503,
		508, 502, 507, 502, 504, 497, 494, 505,
		508, 504, 509, 502, 492, 498, 486, 486,
		495, 502, 500, 497, 486, 494, 494, 487,
		492, 497, 502, 501, 492, 490, 487, 497,
		489, 501, 501, 496, 489, 482, 498, 474,
	},

	// Piece square table for queens
	{
		925, 955, 954, 947, 959, 932, 943, 951,
		908, 949, 959, 962, 956, 945, 923, 933,
		909, 922, 926, 980, 981, 966, 953, 939,
		934, 957, 951, 971, 973, 954, 946, 955,
		901, 959, 941, 962, 954, 951, 953, 941,
		914, 881, 928, 923, 926, 941, 937, 926,
		895, 899, 886, 913, 908, 883, 891, 886,
		904, 892, 896, 874, 919, 889, 921, 887,
	},

	// Piece square table for kings
	{
		-30, -24, -15, 7, 9, 19, 14, -20,
		18, 28, 26, 23, 32, 41, 36, 26,
		15, 26, 33, 29, 24, 53, 49, 24,
		6, 34, 35, 38, 38, 43, 44, 16,
		-4, 2, 33, 40, 43, 38, 26, 4,
		-17, 10, 24, 35, 34, 31, 22, -1,
		-20, -2, 20, 32, 32, 20, 12, -3,
		-40, -22, -12, 8, -16, 3, -9, -32,
	},
}

// Flip white's perspective to black
var FlipSq [2][64]int = [2][64]int{
	{
		0, 1, 2, 3, 4, 5, 6, 7,
		8, 9, 10, 11, 12, 13, 14, 15,
		16, 17, 18, 19, 20, 21, 22, 23,
		24, 25, 26, 27, 28, 29, 30, 31,
		32, 33, 34, 35, 36, 37, 38, 39,
		40, 41, 42, 43, 44, 45, 46, 47,
		48, 49, 50, 51, 52, 53, 54, 55,
		56, 57, 58, 59, 60, 61, 62, 63,
	},

	{
		56, 57, 58, 59, 60, 61, 62, 63,
		48, 49, 50, 51, 52, 53, 54, 55,
		40, 41, 42, 43, 44, 45, 46, 47,
		32, 33, 34, 35, 36, 37, 38, 39,
		24, 25, 26, 27, 28, 29, 30, 31,
		16, 17, 18, 19, 20, 21, 22, 23,
		8, 9, 10, 11, 12, 13, 14, 15,
		0, 1, 2, 3, 4, 5, 6, 7,
	},
}

// Evaluate a board and give a score, from the perspective of the side to move (
// more positive if it's good for the side to move, otherwise more negative).
func EvaluatePos(pos *Position) int16 {
	var mgScores, egScores [2]int16
	phase := TotalPhase

	usBB := pos.SideBB[pos.SideToMove] | pos.SideBB[pos.SideToMove^1]
	for usBB != 0 {
		sq := usBB.PopBit()
		piece := pos.Squares[sq]

		mgScores[piece.Color] += PSQT_MG[piece.Type][FlipSq[piece.Color][sq]]
		egScores[piece.Color] += PSQT_EG[piece.Type][FlipSq[piece.Color][sq]]
		phase -= PhaseValues[piece.Type]
	}

	mgScore := mgScores[pos.SideToMove] - mgScores[pos.SideToMove^1]
	egScore := egScores[pos.SideToMove] - egScores[pos.SideToMove^1]
	phase = (phase*256 + (TotalPhase / 2)) / TotalPhase
	return int16(((int32(mgScore) * (int32(256) - int32(phase))) + (int32(egScore) * int32(phase))) / int32(256))
}
