package engine

const (
	// Constants which map a piece to how much weight it should have on the phase of the game.
	PawnPhase   int16 = 0
	KnightPhase int16 = 1
	BishopPhase int16 = 1
	RookPhase   int16 = 2
	QueenPhase  int16 = 4
	TotalPhase  int16 = PawnPhase*16 + KnightPhase*4 + BishopPhase*4 + RookPhase*4 + QueenPhase*2

	// Constants representing a draw or infinite (checkmate) value.
	Inf int16 = 10000
)

var PhaseValues = [6]int16{
	PawnPhase,
	KnightPhase,
	BishopPhase,
	RookPhase,
	QueenPhase,
	0, // Empty slot for king
}

var PieceValueMG = [6]int16{207, 734, 772, 980, 1833}
var PieceValueEG = [6]int16{296, 477, 482, 933, 1921}

var PSQT_MG = [6][64]int16{

	{
		// MG Pawn PST
		0, 0, 0, 0, 0, 0, 0, 0,
		135, 112, 78, 112, 82, 61, 51, 20,
		-15, -40, 44, 37, 59, 136, 58, -88,
		-53, 5, -12, 13, 36, 41, 16, -92,
		-90, -14, -31, 23, 20, 2, 0, -93,
		-92, -26, -30, -41, -5, -6, 37, -43,
		-119, -22, -59, -70, -56, 45, 63, -85,
		0, 0, 0, 0, 0, 0, 0, 0,
	},
	{
		// MG Knight PST
		-45, -12, -19, -3, -6, -32, -14, -53,
		-94, -99, 103, -15, -7, 69, -11, -37,
		-84, 79, 106, 126, 128, 140, 98, 26,
		-40, 36, 53, 122, 84, 170, 29, 14,
		-23, 13, 17, 22, 44, 37, 43, -19,
		-63, -8, 29, 27, 32, 45, 64, -24,
		-64, -41, -31, 6, -3, 29, -31, -51,
		-71, -46, -92, -70, -14, -83, -30, -20,
	},
	{
		// MG Bishop PST
		-12, -22, -58, 0, -18, 0, -1, 14,
		-63, 8, -3, -32, 20, 61, 42, -89,
		-18, 44, 40, 79, 22, 76, 12, 6,
		-58, 13, 3, 86, 56, 110, 0, 11,
		-1, 13, -7, 44, 27, 29, -1, 2,
		0, 21, 14, 23, 5, 56, 24, 5,
		12, 31, 26, -15, 28, 45, 72, 9,
		-31, 3, -27, -80, -69, -32, -26, -68,
	},
	{
		// MG Rook PST
		25, -13, 69, 52, 83, -26, 0, 0,
		20, 76, 116, 108, 103, 47, 18, 45,
		-16, 44, 22, 27, 21, 55, 75, -5,
		-71, 9, 5, 66, 53, 67, 21, -45,
		-51, -6, -53, 24, 27, -26, 32, -25,
		-65, -19, -2, -12, 2, -34, -29, -40,
		-78, 11, -38, 1, 7, -1, -18, -166,
		-12, -11, 17, 34, 36, 11, -66, -23,
	},
	{
		// MG Queen PST
		31, 0, 78, 46, 52, 22, 34, 33,
		-26, -57, 67, 62, 56, 101, 79, 99,
		21, -9, 41, 22, 45, 45, 66, 97,
		-54, -17, -7, 18, 8, 3, 22, 6,
		-5, -80, -23, -8, 9, 36, 22, 21,
		-15, 28, -14, 36, -26, 11, 41, 43,
		-69, -8, 48, 22, 31, 40, -14, -21,
		-18, -21, -21, 39, -30, -66, -28, -71,
	},
	{
		// MG King PST
		18, 4, 26, 4, -1, 5, 3, -8,
		4, 37, 7, 4, 34, 41, 2, -18,
		10, 29, 34, 13, 42, 41, 2, -12,
		-10, 10, 22, 21, -15, -40, -9, -19,
		-1, -16, -25, -11, -84, -55, -41, -81,
		5, 23, -28, -79, -26, -41, -34, -13,
		73, 44, 41, -101, -79, -71, 39, 60,
		-61, 104, 79, -103, 33, -32, 116, 83,
	},
}

var PSQT_EG [6][64]int16 = [6][64]int16{
	{
		// EG Pawn PST
		0, 0, 0, 0, 0, 0, 0, 0,
		310, 296, 246, 187, 238, 175, 275, 329,
		94, 137, 74, 47, 37, 6, 56, 88,
		-13, -36, -66, -85, -100, -94, -62, -41,
		-34, -70, -91, -100, -100, -97, -82, -78,
		-57, -67, -95, -94, -87, -94, -97, -81,
		-43, -66, -74, -66, -67, -86, -82, -86,
		0, 0, 0, 0, 0, 0, 0, 0,
	},
	{
		// EG Knight PST
		-71, -51, 8, -31, 7, 29, -57, -99,
		-21, -11, 17, 27, 25, -5, -7, -58,
		-13, 0, 47, 32, 2, 48, -6, -43,
		-5, 52, 60, 90, 80, 37, 39, 7,
		-25, 4, 65, 75, 55, 70, 16, -27,
		20, 7, 15, 68, 68, 15, -26, -28,
		17, -30, 15, 32, 15, -29, -43, -42,
		-47, -67, -10, -16, -13, -31, -36, -38,
	},
	{
		// EG Bishop PST
		-14, -30, -23, -34, 1, -10, 27, -19,
		17, -10, 40, -15, 28, 17, -26, -50,
		8, -6, 10, -33, 1, 60, 29, 19,
		-16, 26, 61, 28, 27, -3, 5, -14,
		19, 7, 62, 46, 36, 30, -3, -28,
		-11, -4, 33, 22, 46, 21, -6, -12,
		1, -26, 2, 7, 16, -9, -26, -25,
		-41, -18, -44, 29, 4, -14, 0, -32,
	},
	{
		// EG Rook PST
		39, 16, 41, 39, 10, 34, 42, 13,
		24, 11, 11, 30, 9, 17, 23, 8,
		3, 43, 5, 20, -5, -5, -14, 19,
		20, -7, 27, -6, -8, -14, 11, 4,
		13, 2, 33, 5, -14, -13, -18, -29,
		-6, 3, -17, 6, 1, 0, -6, 4,
		-1, -22, 25, 10, -7, -4, 8, 34,
		-22, 10, 18, -6, -12, -13, 15, -33,
	},
	{
		// EG Queen PST
		-23, 45, 15, 48, 59, 21, 43, 37,
		-48, 52, 30, 45, 71, 41, 47, 9,
		-35, 24, 7, 56, 31, 75, 10, -31,
		3, 57, 37, 44, 61, 81, 59, 58,
		-50, 102, 62, 74, 63, 46, 57, 15,
		3, -83, 7, 2, 60, 13, -7, -2,
		-23, -25, -37, 24, -22, -8, -28, -25,
		-20, -24, -23, -97, 3, -37, -27, -71,
	},
	{
		// EG King PST
		6, -29, 5, -25, 28, 8, 7, 1,
		-24, -12, 27, 28, 2, 37, 20, 2,
		20, 62, 49, 64, 42, 67, 49, 11,
		-21, 18, 42, 55, 43, 60, 54, -38,
		-88, -7, 28, 47, 55, 45, 4, -30,
		-35, -28, 6, 41, 42, 28, 7, -26,
		-62, -38, -6, 18, 23, 18, -16, -52,
		-102, -111, -71, -11, -77, -37, -89, -148,
	},
}

// Flip white's perspective to black
var FlipSq [2][64]int = [2][64]int{
	{
		0, 1, 2, 3, 4, 5, 6, 7,
		8, 9, 10, 11, 12, 13, 14, 15,
		16, 17, 18, 19, 20, 21, 22, 23,
		24, 25, 26, 27, 28, 29, 30, 31,
		32, 33, 34, 35, 36, 37, 38, 39,
		40, 41, 42, 43, 44, 45, 46, 47,
		48, 49, 50, 51, 52, 53, 54, 55,
		56, 57, 58, 59, 60, 61, 62, 63,
	},

	{
		56, 57, 58, 59, 60, 61, 62, 63,
		48, 49, 50, 51, 52, 53, 54, 55,
		40, 41, 42, 43, 44, 45, 46, 47,
		32, 33, 34, 35, 36, 37, 38, 39,
		24, 25, 26, 27, 28, 29, 30, 31,
		16, 17, 18, 19, 20, 21, 22, 23,
		8, 9, 10, 11, 12, 13, 14, 15,
		0, 1, 2, 3, 4, 5, 6, 7,
	},
}

// Evaluate a position and give a score, from the perspective of the side to move (
// more positive if it's good for the side to move, otherwise more negative).
func evaluatePos(pos *Position) int16 {
	mgScores := pos.MGScores
	egScores := pos.EGScores
	phase := pos.Phase

	mgScore := mgScores[pos.SideToMove] - mgScores[pos.SideToMove^1]
	egScore := egScores[pos.SideToMove] - egScores[pos.SideToMove^1]

	phase = (phase*256 + (TotalPhase / 2)) / TotalPhase
	return int16(((int32(mgScore) * (int32(256) - int32(phase))) + (int32(egScore) * int32(phase))) / int32(256))
}
