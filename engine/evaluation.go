package engine

const (
	// Constants which map a piece to how much weight it should have on the phase of the game.
	PawnPhase   int16 = 0
	KnightPhase int16 = 1
	BishopPhase int16 = 1
	RookPhase   int16 = 2
	QueenPhase  int16 = 4
	TotalPhase  int16 = PawnPhase*16 + KnightPhase*4 + BishopPhase*4 + RookPhase*4 + QueenPhase*2

	// Constants representing a draw or infinite (checkmate) value.
	Inf  int16 = 10000
	Draw int16 = -25
)

var PhaseValues [6]int16 = [6]int16{
	PawnPhase,
	KnightPhase,
	BishopPhase,
	RookPhase,
	QueenPhase,
}

// Endgame and middlegame piece square tables, with piece values builtin.
//
// https://www.chessprogramming.org/Piece-Square_Tables
//
// Many thanks to Thomas Jahn for the tables, which can be found here:
//
// https://github.com/lithander/MinimalChessEngine/blob/master/MinimalChess/Evaluation.cs#L88
//
var PSQT_MG [6][64]int16 = [6][64]int16{

	// Piece-square table for pawns
	{
		100, 100, 100, 100, 100, 100, 100, 100,
		176, 214, 147, 194, 189, 214, 132, 77,
		82, 88, 106, 113, 150, 146, 110, 73,
		67, 93, 83, 95, 97, 92, 99, 63,
		55, 74, 80, 89, 94, 86, 90, 55,
		55, 70, 68, 69, 76, 81, 101, 66,
		52, 84, 66, 60, 69, 99, 117, 60,
		100, 100, 100, 100, 100, 100, 100, 100,
	},

	// Piece-square table for knights
	{
		116, 228, 271, 270, 338, 213, 278, 191,
		225, 247, 353, 331, 321, 360, 300, 281,
		258, 354, 343, 362, 389, 428, 375, 347,
		300, 332, 325, 360, 349, 379, 339, 333,
		298, 322, 325, 321, 337, 332, 332, 303,
		287, 297, 316, 319, 327, 320, 327, 294,
		276, 259, 300, 304, 308, 322, 296, 292,
		208, 290, 257, 274, 296, 284, 293, 284,
	},

	// Piece-square table for bishops
	{
		292, 338, 254, 283, 299, 294, 337, 323,
		316, 342, 319, 319, 360, 385, 343, 295,
		342, 377, 373, 374, 368, 392, 385, 363,
		332, 338, 356, 384, 370, 380, 337, 341,
		327, 354, 353, 366, 373, 346, 345, 341,
		335, 350, 351, 347, 352, 361, 350, 344,
		333, 354, 354, 339, 344, 353, 367, 333,
		309, 341, 342, 325, 334, 332, 302, 313,
	},

	// Piece square table for rook
	{
		493, 511, 487, 515, 514, 483, 485, 495,
		493, 498, 529, 534, 546, 544, 483, 508,
		465, 490, 499, 497, 483, 519, 531, 480,
		448, 464, 476, 495, 484, 506, 467, 455,
		442, 451, 468, 470, 476, 472, 498, 454,
		441, 461, 468, 465, 478, 481, 478, 452,
		443, 472, 467, 476, 483, 500, 487, 423,
		459, 463, 470, 479, 480, 480, 446, 458,
	},

	// Piece square table for queens
	{
		865, 902, 922, 911, 964, 948, 933, 928,
		886, 865, 903, 921, 888, 951, 923, 940,
		902, 901, 907, 919, 936, 978, 965, 966,
		881, 885, 897, 894, 898, 929, 906, 915,
		907, 884, 899, 896, 904, 906, 912, 911,
		895, 916, 900, 902, 904, 912, 924, 917,
		874, 899, 918, 908, 915, 924, 911, 906,
		906, 899, 906, 918, 898, 890, 878, 858,
	},

	// Piece square table for kings
	{
		-11, 70, 55, 31, -37, -16, 22, 22,
		37, 24, 25, 36, 16, 8, -12, -31,
		33, 26, 42, 11, 11, 40, 35, -2,
		0, -9, 1, -21, -20, -22, -15, -60,
		-25, 16, -27, -67, -81, -58, -40, -62,
		7, -2, -37, -77, -79, -60, -23, -26,
		12, 15, -13, -72, -56, -28, 15, 17,
		-6, 44, 29, -58, 8, -25, 34, 28,
	},
}

var PSQT_EG [6][64]int16 = [6][64]int16{

	// Piece-square table for pawns
	{
		100, 100, 100, 100, 100, 100, 100, 100,
		277, 270, 252, 229, 240, 233, 264, 285,
		190, 197, 182, 168, 155, 150, 180, 181,
		128, 117, 108, 102, 93, 100, 110, 110,
		107, 101, 89, 85, 86, 83, 92, 91,
		96, 96, 85, 92, 88, 83, 85, 82,
		107, 99, 97, 97, 100, 89, 89, 84,
		100, 100, 100, 100, 100, 100, 100, 100,
	},

	// Piece-square table for knights
	{
		229, 236, 269, 250, 257, 249, 219, 188,
		252, 274, 263, 281, 273, 258, 260, 229,
		253, 264, 290, 289, 278, 275, 263, 243,
		267, 280, 299, 301, 299, 293, 285, 264,
		263, 273, 293, 301, 296, 293, 284, 261,
		258, 276, 278, 290, 287, 274, 260, 255,
		241, 259, 270, 277, 276, 262, 260, 237,
		253, 233, 258, 264, 261, 260, 234, 215,
	},

	// Piece-square table for bishops
	{
		288, 278, 287, 292, 293, 290, 287, 277,
		289, 294, 301, 288, 296, 289, 294, 281,
		292, 289, 296, 292, 296, 300, 296, 293,
		293, 302, 305, 305, 306, 302, 296, 297,
		289, 293, 304, 308, 298, 301, 291, 288,
		285, 294, 304, 303, 306, 294, 290, 280,
		285, 284, 291, 299, 300, 290, 284, 271,
		277, 292, 286, 295, 294, 288, 290, 285,
	},

	// Piece square table for rook
	{
		506, 500, 508, 502, 504, 507, 505, 503,
		505, 506, 502, 502, 491, 497, 506, 501,
		504, 503, 499, 500, 500, 495, 496, 496,
		503, 502, 510, 500, 502, 504, 500, 505,
		505, 509, 509, 506, 504, 503, 496, 495,
		500, 503, 500, 505, 498, 498, 499, 489,
		496, 495, 502, 505, 498, 498, 491, 499,
		492, 497, 498, 496, 493, 493, 497, 480,
	},

	// Piece square table for queens
	{
		918, 937, 943, 945, 934, 926, 924, 942,
		907, 945, 946, 951, 982, 933, 928, 912,
		896, 921, 926, 967, 963, 937, 924, 915,
		926, 944, 939, 962, 983, 957, 981, 950,
		893, 949, 942, 970, 952, 956, 953, 936,
		911, 892, 933, 928, 934, 942, 934, 924,
		907, 898, 883, 903, 903, 893, 886, 888,
		886, 887, 890, 872, 916, 890, 906, 879,
	},

	// Piece square table for kings
	{
		-74, -43, -23, -25, -11, 10, 1, -12,
		-18, 6, 4, 9, 7, 26, 14, 8,
		-3, 6, 10, 6, 8, 24, 27, 3,
		-16, 8, 13, 20, 14, 19, 10, -3,
		-25, -14, 13, 20, 24, 15, 1, -15,
		-27, -10, 9, 20, 23, 14, 2, -12,
		-32, -17, 4, 14, 15, 5, -10, -22,
		-55, -40, -23, -6, -20, -8, -28, -47,
	},
}

// Flip white's perspective to black
var FlipSq [2][64]int = [2][64]int{
	{
		0, 1, 2, 3, 4, 5, 6, 7,
		8, 9, 10, 11, 12, 13, 14, 15,
		16, 17, 18, 19, 20, 21, 22, 23,
		24, 25, 26, 27, 28, 29, 30, 31,
		32, 33, 34, 35, 36, 37, 38, 39,
		40, 41, 42, 43, 44, 45, 46, 47,
		48, 49, 50, 51, 52, 53, 54, 55,
		56, 57, 58, 59, 60, 61, 62, 63,
	},

	{
		56, 57, 58, 59, 60, 61, 62, 63,
		48, 49, 50, 51, 52, 53, 54, 55,
		40, 41, 42, 43, 44, 45, 46, 47,
		32, 33, 34, 35, 36, 37, 38, 39,
		24, 25, 26, 27, 28, 29, 30, 31,
		16, 17, 18, 19, 20, 21, 22, 23,
		8, 9, 10, 11, 12, 13, 14, 15,
		0, 1, 2, 3, 4, 5, 6, 7,
	},
}

// Evaluate a board and give a score, from the perspective of the side to move (
// more positive if it's good for the side to move, otherwise more negative).
func evaluatePos(pos *Position) int16 {
	var mgScores, egScores [2]int16
	phase := TotalPhase

	usBB := pos.SideBB[pos.SideToMove] | pos.SideBB[pos.SideToMove^1]
	for usBB != 0 {
		sq := usBB.PopBit()
		piece := pos.Squares[sq]

		mgScores[piece.Color] += PSQT_MG[piece.Type][FlipSq[piece.Color][sq]]
		egScores[piece.Color] += PSQT_EG[piece.Type][FlipSq[piece.Color][sq]]
		phase -= PhaseValues[piece.Type]
	}

	mgScore := mgScores[pos.SideToMove] - mgScores[pos.SideToMove^1]
	egScore := egScores[pos.SideToMove] - egScores[pos.SideToMove^1]
	phase = (phase*256 + (TotalPhase / 2)) / TotalPhase
	return int16(((int32(mgScore) * (int32(256) - int32(phase))) + (int32(egScore) * int32(phase))) / int32(256))
}
