package engine

const (
	// Constants which map a piece to how much weight it should have on the phase of the game.
	PawnPhase   int16 = 0
	KnightPhase int16 = 1
	BishopPhase int16 = 1
	RookPhase   int16 = 2
	QueenPhase  int16 = 4
	TotalPhase  int16 = PawnPhase*16 + KnightPhase*4 + BishopPhase*4 + RookPhase*4 + QueenPhase*2

	// Constants representing a draw or infinite (checkmate) value.
	Inf int16 = 10000
)

type Eval struct {
	MGScores [2]int16
	EGScores [2]int16
}

var BishopPairBonusMG int16 = 13
var BishopPairBonusEG int16 = 34

var PieceValueMG = [6]int16{123, 489, 515, 661, 1297}
var PieceValueEG = [6]int16{182, 331, 358, 660, 1311}

var PhaseValues = [6]int16{
	PawnPhase,
	KnightPhase,
	BishopPhase,
	RookPhase,
	QueenPhase,
}

var PSQT_MG = [6][64]int16{
	{
		// MG Pawn PST
		0, 0, 0, 0, 0, 0, 0, 0,
		146, 124, 69, 108, 82, 70, 3, -29,
		-45, -62, 8, 13, 75, 102, -9, -65,
		-27, 0, -1, 8, 20, 5, 10, -54,
		-61, -12, -24, 5, 9, -10, 2, -57,
		-52, -19, -21, -27, -7, -13, 24, -40,
		-66, -16, -40, -45, -36, 11, 32, -53,
		0, 0, 0, 0, 0, 0, 0, 0,
	},
	{
		// MG Knight PST
		-227, -5, -21, 51, -24, -100, 0, -54,
		-92, -64, 140, -13, 35, 100, -18, -25,
		-60, 71, 72, 78, 81, 161, 68, 23,
		-18, 21, 39, 62, 56, 91, 19, 17,
		-20, 31, 24, 16, 26, 21, 39, -5,
		-31, -10, 19, 4, 24, 23, 32, -18,
		-49, -41, -10, 4, -1, 32, -25, -15,
		-82, -25, -64, -49, -9, -65, -16, -34,
	},
	{
		// MG Bishop PST
		-28, -18, -110, -5, -46, -1, 2, -50,
		-54, 5, -11, -54, 0, 95, 17, -52,
		-21, 40, 21, 46, 66, 53, 8, 2,
		-18, 4, 0, 49, 26, 61, -5, 11,
		6, 4, 3, 28, 4, 16, -6, 0,
		10, 21, 11, 19, 5, 41, 7, -6,
		39, 24, 12, -2, 13, 14, 44, 35,
		-15, 10, -20, -47, -33, -11, 2, -62,
	},
	{
		// MG Rook PST
		26, -14, 63, 95, 86, 19, 17, 2,
		34, 54, 97, 62, 89, 24, 4, 42,
		-19, 21, 6, 19, -1, 22, 76, 30,
		-50, 7, 0, 62, 32, 56, 6, -69,
		-52, -3, -49, -10, 23, -32, 16, -29,
		-59, -20, -16, -19, -13, -22, -32, -32,
		-76, -8, -29, -20, -23, -6, -8, -115,
		-22, -16, -7, 5, 11, -9, -34, -26,
	},
	{
		// MG Queen PST
		-23, -65, 68, 31, 49, 41, 94, 29,
		-16, -57, 29, 54, 16, 86, 51, 99,
		16, -7, 15, -3, 20, 79, 33, 55,
		-60, -37, -33, 6, -10, 1, 7, -1,
		-2, -67, -27, 1, -1, 9, 20, 4,
		-13, 13, -11, 15, -21, 4, 24, 26,
		-66, -13, 20, 0, 21, 15, -10, -23,
		-2, -12, -9, 20, -20, -53, -5, -62,
	},
	{
		// MG King PST
		35, 27, 45, 59, -33, -17, 37, -11,
		10, 35, 46, 25, 70, 13, 26, -23,
		-6, 63, 21, -6, 80, 91, 20, 28,
		-33, -12, -20, -30, -57, -41, 1, -8,
		6, -30, -22, -122, -88, -78, -72, -87,
		38, 16, -15, -70, -18, -51, -29, 0,
		68, 23, 28, -66, -55, -47, 24, 40,
		-25, 77, 56, -58, 18, -30, 73, 61,
	},
}

var PSQT_EG [6][64]int16 = [6][64]int16{
	{
		// EG Pawn PST
		0, 0, 0, 0, 0, 0, 0, 0,
		221, 205, 166, 132, 155, 111, 237, 227,
		79, 109, 81, 36, 8, -11, 56, 59,
		-21, -35, -51, -61, -71, -61, -37, -37,
		-39, -50, -56, -69, -72, -69, -61, -53,
		-49, -53, -64, -65, -60, -64, -71, -65,
		-36, -48, -46, -56, -47, -65, -66, -63,
		0, 0, 0, 0, 0, 0, 0, 0,
	},
	{
		// EG Knight PST
		-95, -31, 32, -27, 14, 35, -73, -124,
		12, 5, -15, 40, 7, -16, -2, -33,
		-8, -4, 36, 27, 13, 10, -7, -45,
		-2, 28, 53, 70, 52, 37, 23, 13,
		-22, 14, 45, 67, 40, 52, 14, -10,
		8, 9, 17, 50, 40, 2, -9, -18,
		24, -14, 7, 25, 4, -24, -19, -42,
		-27, -67, -7, -13, -6, -22, -38, -79,
	},
	{
		// EG Bishop PST
		3, -21, -21, -19, -8, 13, -1, -8,
		22, -10, 34, 9, 6, -5, -13, -35,
		8, -14, 14, -25, 1, 13, 21, 21,
		-12, 18, 30, 18, 23, -5, 9, 3,
		10, 5, 44, 22, 41, 18, -3, -3,
		-19, -10, 19, 12, 26, 6, 8, -4,
		-11, -16, 5, 0, 10, -10, -21, -34,
		-28, -22, -34, 13, 1, -17, -11, -4,
	},
	{
		// EG Rook PST
		4, 9, -3, -3, 0, 18, 10, 8,
		8, -3, -3, 28, -1, 12, 8, -3,
		8, -2, 1, 6, -1, -3, -24, -6,
		7, 1, 13, -17, -3, -23, 3, 28,
		8, 3, 21, 11, -5, -1, -6, 5,
		7, 4, -10, 8, -1, -8, 5, -8,
		12, 4, 6, 15, -2, 2, -9, 26,
		-2, 3, 5, 6, 1, 0, -5, -24,
	},
	{
		// EG Queen PST
		-10, 44, -16, 56, 27, -19, -15, 9,
		-46, 63, 5, 2, 50, 26, 30, -87,
		-43, 10, 9, 48, 45, 12, -4, -23,
		15, 37, 35, 19, 62, 68, 70, 54,
		-53, 77, 46, 51, 24, 63, 55, 26,
		-5, -37, 16, -22, 39, -8, -35, 7,
		-30, -16, -39, 9, -32, -14, -43, -15,
		-21, -30, -15, -59, 3, -29, -15, -80,
	},
	{
		// EG King PST
		8, -14, 1, -29, 4, 21, 8, 11,
		-27, -10, 14, 22, 3, 30, 19, 18,
		-21, 5, 21, 27, 15, 17, 39, 2,
		-13, 36, 30, 27, 32, 40, 21, -18,
		-60, 12, 24, 40, 35, 29, 19, -16,
		-21, -17, 4, 30, 23, 25, 6, -3,
		-48, -22, 0, 15, 20, 16, -3, -29,
		-82, -78, -50, -5, -49, -19, -56, -97,
	},
}

// Flip white's perspective to black
var FlipSq [2][64]int = [2][64]int{
	{
		0, 1, 2, 3, 4, 5, 6, 7,
		8, 9, 10, 11, 12, 13, 14, 15,
		16, 17, 18, 19, 20, 21, 22, 23,
		24, 25, 26, 27, 28, 29, 30, 31,
		32, 33, 34, 35, 36, 37, 38, 39,
		40, 41, 42, 43, 44, 45, 46, 47,
		48, 49, 50, 51, 52, 53, 54, 55,
		56, 57, 58, 59, 60, 61, 62, 63,
	},

	{
		56, 57, 58, 59, 60, 61, 62, 63,
		48, 49, 50, 51, 52, 53, 54, 55,
		40, 41, 42, 43, 44, 45, 46, 47,
		32, 33, 34, 35, 36, 37, 38, 39,
		24, 25, 26, 27, 28, 29, 30, 31,
		16, 17, 18, 19, 20, 21, 22, 23,
		8, 9, 10, 11, 12, 13, 14, 15,
		0, 1, 2, 3, 4, 5, 6, 7,
	},
}

// Evaluate a position and give a score, from the perspective of the side to move (
// more positive if it's good for the side to move, otherwise more negative).
func evaluatePos(pos *Position) int16 {
	eval := Eval{MGScores: pos.MGScores, EGScores: pos.EGScores}
	phase := pos.Phase

	if pos.Pieces[White][Bishop].CountBits() >= 2 {
		eval.MGScores[White] += BishopPairBonusMG
		eval.MGScores[White] += BishopPairBonusEG
	}

	if pos.Pieces[Black][Bishop].CountBits() >= 2 {
		eval.MGScores[Black] += BishopPairBonusMG
		eval.MGScores[Black] += BishopPairBonusEG
	}

	mgScore := eval.MGScores[pos.SideToMove] - eval.MGScores[pos.SideToMove^1]
	egScore := eval.EGScores[pos.SideToMove] - eval.EGScores[pos.SideToMove^1]

	phase = (phase*256 + (TotalPhase / 2)) / TotalPhase
	return int16(((int32(mgScore) * (int32(256) - int32(phase))) + (int32(egScore) * int32(phase))) / int32(256))
}
